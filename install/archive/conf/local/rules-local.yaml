# Topology definition
# name to be used when submitting
name: "HendrixRulesTopology"

# NOTE: We may want to consider some level of spring integration. For example, allowing component references
# to a spring `ApplicationContext`.

# topology configuration
# this will be passed to the submitter as a map of config options
#
config:
    topology.workers: 2
    store.sql.url: "jdbc:mysql://localhost:3306/"
    store.username: "root"
    store.password: "lmm"
    store.sql.db: "hendrix2"
    rstore.type: "io.symcpe.wraith.silo.sql.SQLRulesStore"
    tstore.type: "io.symcpe.wraith.silo.sql.SQLRulesStore"
    rstore.sql.table: "rules_table"
    tstore.sql.table: "alert_template"
    rule.group.active: "true"
    log.slow: "3000"
    ui.endpoint: "http://localhost:9000/api/receive/"

# Components
# Components are analagous to Spring beans. They are meant to be used as constructor,
# property(setter), and builder arguments.
#
# for the time being, components must be declared in the order they are referenced

# spout definitions
spouts:
  - id: "logSpout"
    className: "io.symcpe.hendrix.storm.bolts.helpers.FileLogReaderSpout"
    constructorArgs:
      - "~/hendrix/log-data"

  - id: "ruleSpout"
    className: "io.symcpe.hendrix.storm.bolts.helpers.SpoolingFileSpout"
    constructorArgs:
      - "~/hendrix/rule-updates.txt"

  - id: "templateSpout"
    className: "io.symcpe.hendrix.storm.bolts.helpers.SpoolingFileSpout"
    constructorArgs:
      - "~/hendrix/template-updates.txt"

# bolt definitions
bolts:
  - id: "interceptionBolt"
    className: "io.symcpe.hendrix.storm.bolts.InterceptionBolt"
    parallelism: 1
    
  - id: "translatorBolt"
    className: "io.symcpe.hendrix.storm.bolts.JSONTranslatorBolt"
    parallelism: 1
    
  - id: "templateComponent"
    className: "io.symcpe.hendrix.storm.bolts.TemplateTranslatorBolt"
    parallelism: 1
    
  - id: "ruleComponent"
    className: "io.symcpe.hendrix.storm.bolts.RuleTranslatorBolt"
    parallelism: 1
    
  - id: "ruleEngineBolt"
    className: "io.symcpe.hendrix.storm.bolts.RulesEngineBolt"
    parallelism: 1

  - id: "aggregationController"
    className: "io.symcpe.hendrix.storm.bolts.AggregationControllerBolt"
    parallelism: 1
    
  - id: "stateTrackingBolt"
    className: "io.symcpe.hendrix.storm.bolts.StateTrackingBolt"
    parallelism: 1

  - id: "alertViewerBolt"
    className: "io.symcpe.hendrix.storm.bolts.helpers.AlertViewerBolt"
    parallelism: 1
    
  - id: "templatedAlertEngineBolt"
    className: "io.symcpe.hendrix.storm.bolts.TemplatedAlertingEngineBolt"
    parallelism: 1
    
  - id: "errorBolt"
    className: "io.symcpe.hendrix.storm.bolts.ErrorBolt"
    parallelism: 1

  - id: "printerBolt"
    className: "io.symcpe.hendrix.storm.bolts.helpers.PrinterBolt"
    parallelism: 1

#stream definitions
# stream definitions define connections between spouts and bolts.
# note that such connections can be cyclical
# custom stream groupings are also supported

streams:
  - name: "Kafka->Interception"
    from: "logSpout"
    to: "interceptionBolt"
    grouping:
      type: SHUFFLE

  - name: "Kafka Rules->Rule Translator"
    from: "ruleSpout"
    to: "ruleComponent"
    grouping:
      type: SHUFFLE
      
  - name: "Kafka Templates->Template Translator"
    from: "templateSpout"
    to: "templateComponent"
    grouping:
      type: SHUFFLE

  - name: "Interception->Translator"
    from: "interceptionBolt"
    to: "translatorBolt"
    grouping:
      type: SHUFFLE
      
  - name: "Translator->Rule Engine"
    from: "translatorBolt"
    to: "ruleEngineBolt"
    grouping:
      type: SHUFFLE

  - name: "Translator->Printer"
    from: "translatorBolt"
    to: "printerBolt"
    grouping:
      type: SHUFFLE
      
  - name: "Rule Engine->State Tracking"
    from: "ruleEngineBolt"
    to: "stateTrackingBolt"
    grouping:
      type: FIELDS
      args: ["_ri", "_a"]
      streamId: stateStream
      
  - name: "Rule Engine->Templated Alert Engine"
    from: "ruleEngineBolt"
    to: "templatedAlertEngineBolt"
    grouping:
      type: SHUFFLE
      streamId: "alertStream"

  - name: "Rule Engine->Printer"
    from: "ruleEngineBolt"
    to: "printerBolt"
    grouping:
      type: SHUFFLE
      streamId: stateStream
      
  - name: "Templated Alert Engine->Printer"
    from: "templatedAlertEngineBolt"
    to: "printerBolt"
    grouping:
      type: SHUFFLE
      streamId: "alertStream"

  - name: "Rule Translator->Rule Engine"
    from: "ruleComponent"
    to: "ruleEngineBolt"
    grouping:
      type: ALL
      streamId: "syncStream"

  - name: "Rule Translator->Aggregation Controller"
    from: "ruleComponent"
    to: "aggregationController"
    grouping:
      type: ALL
      streamId: "syncStream"

  - name: "Aggregation Controller->State Tracker"
    from: "aggregationController"
    to: "stateTrackingBolt"
    grouping:
      type: ALL
      streamId: "tickStream" 
      
  - name: "Template Translator->Templated Alert Engine"
    from: "templateComponent"
    to: "templatedAlertEngineBolt"
    grouping:
      type: ALL
      streamId: "syncStream"
      
  - name: "State Tracker->Printer"
    from: "stateTrackingBolt"
    to: "printerBolt"
    grouping:
      type: SHUFFLE
      streamId: "aggregationOutputStream"

  - name: "Translator->Error"
    from: "translatorBolt"
    to: "errorBolt"
    grouping:
      type: SHUFFLE
      streamId: "errorStream"

  - name: "Rule Translator->Error"
    from: "ruleComponent"
    to: "errorBolt"
    grouping:
      type: SHUFFLE
      streamId: "errorStream"
      
  - name: "Rule Translator->Error"
    from: "ruleComponent"
    to: "errorBolt"
    grouping:
      type: SHUFFLE
      streamId: "errorStream"

  - name: "Rule Engine->Error"
    from: "ruleEngineBolt"
    to: "errorBolt"
    grouping:
      type: SHUFFLE
      streamId: "errorStream"
      
  - name: "Templated Alert Engine->Error"
    from: "templatedAlertEngineBolt"
    to: "errorBolt"
    grouping:
      type: SHUFFLE
      streamId: "errorStream"

  - name: "Error->Printer"
    from: "errorBolt"
    to: "printerBolt"
    grouping:
      type: SHUFFLE
      streamId: "kafkaErrorStream"